" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
" set compatible

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
    filetype plugin indent on
endif

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
    syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" set background=light

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif



" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
" set autowrite		" Automatically save before commands like :next and :make
" set hidden		" Hide buffers when they are abandoned
set mouse=n		" Enable mouse usage (normal mode)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
    source /etc/vim/vimrc.local
endif

" ==============
" Custom Cofig
" ==============

" System Clipboard Support:
set pastetoggle=<F2>
set clipboard=unnamedplus

" Remap Leader Key:
let mapleader="ö"
let maplocalleader="ç"

" Easier Moving Between Tabs:
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt
noremap <Leader>0 :tablast<CR>
noremap <Leader>t :tabnew<CR>
noremap <Leader>q :tabclose<CR>
noremap <Leader>n :tabnext<CR>
noremap <Leader>b :tabprevious<CR>

" Easily Sorting Code:
vnoremap <Leader>s :sort<CR>

" Easier Moving Code:
vnoremap < <gv
vnoremap > >gv

" More Secure Vimcryption:
set cryptmethod=blowfish

" Status Line:
" Thanks https://gist.github.com/ericbn/f2956cd9ec7d6bff8940c2087247b132----
set laststatus=2
set statusline=
set statusline+=%(%{&buflisted?bufnr('%'):''}\ \ %)
set statusline+=%< " Truncate line here
set statusline+=%f\  " File path, as typed or relative to current directory
set statusline+=%{&modified?'+\ ':''}
set statusline+=%{&readonly?'\ ':''}
set statusline+=%1*\  " Set highlight group to User1
set statusline+=%= " Separation point between left and right aligned items
set statusline+=\ %{&filetype!=#''?&filetype:'none'}
set statusline+=%(\ %{(&bomb\|\|&fileencoding!~#'^$\\\|utf-8'?'\ '.&fileencoding.(&bomb?'-bom':''):'')
  \.(&fileformat!=#(has('win32')?'dos':'unix')?'\ '.&fileformat:'')}%)
set statusline+=%(\ \ %{&modifiable?(&expandtab?'et\ ':'noet\ ').&shiftwidth:''}%)
set statusline+=\ %* " Restore normal highlight
set statusline+=\ %{&number?'':printf('%2d,',line('.'))} " Line number
set statusline+=%-2v " Virtual column number
set statusline+=\ %2p%% " Percentage through file in lines as in |CTRL-G|


hi StatusLine cterm=reverse ctermfg=14 ctermbg=0
hi StatusLineNC cterm=reverse ctermfg=11 ctermbg=0
hi User1 ctermfg=14 ctermbg=0
" }}}

" Comment Lines Easily:
augroup comment
    autocmd!
    autocmd FileType python,sh,zsh,bash nnoremap <buffer> <LocalLeader>c mqI# <Esc>'q
    autocmd FileType tex nnoremap  <buffer> <LocalLeader>c mqI% <Esc>$'q
    autocmd FileType vimrc nnoremap <buffer> <LocalLeader>c mqI" <Esc>'q
augroup END

" Run Files:
augroup run
    autocmd!
    autocmd FileType python nnoremap <buffer> <LocalLeader>r :execute "!python " . resolve(expand('%:p')) <CR>
augroup END

" Folding:
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" Enable Syntax Highlighting:
filetype off
filetype plugin indent on

" Enable Line Numbers And Line Lenght:
set number         " show line numbers
set relativenumber
" set tw=79          " width of the document(used by gd)
set nowrap         " don't automatically wrap on lad
set fo -=t         " don't automatically wrap text when typing
set colorcolumn=80
highlight ColorColumn ctermbg=1

" Fuzzy Search:
set path+=**
set wildmenu

" Useful Things:
set history=1000
set undolevels=1000
set title
nnoremap <CR> :noh<CR>

" Tabs:
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Delete Without Yank:
nnoremap <Leader>d "_d
nnoremap <Leader>D "_D
nnoremap <Leader>x "_x
nnoremap <Leader>X "_X

" Make Search Case Insensitive:
set hlsearch
set incsearch
set ignorecase
set smartcase

" Vertical split char:
set fillchars+=vert:\|
hi! VertSplit ctermfg=0 ctermbg=5

" Autoclose:
inoremap <Leader>( ()<Esc>ha
inoremap <Leader>{ {}<Esc>ha
inoremap <Leader>[ []<Esc>ha
inoremap <Leader>" ""<Esc>ha
inoremap <Leader>' ''<Esc>ha
inoremap <Leader>` ``<Esc>ha
inoremap <Leader>< <><Esc>ha
inoremap <Leader>$ $$<Esc>ha

" Change Next:
onoremap in( :<C-U>normal! f(vi(<CR>
onoremap in{ :<C-U>normal! f{vi{<CR>
onoremap in[ :<C-U>normal! f[vi[<CR>
onoremap in" :<C-U>normal! f"vi"<CR>
onoremap in' :<C-U>normal! f'vi'<CR>
onoremap in` :<C-U>normal! f`vi`<CR>
onoremap in< :<C-U>normal! f<vi<<CR>

" Change Last:
onoremap il( :<C-U>normal! F(vi(<CR>
onoremap il{ :<C-U>normal! F{vi{<CR>
onoremap il[ :<C-U>normal! F[vi[<CR>
onoremap il" :<C-U>normal! F"vi"<CR>
onoremap il' :<C-U>normal! F'vi'<CR>
onoremap il` :<C-U>normal! F`vi`<CR>
onoremap il< :<C-U>normal! F<vi<<CR>

" Disable Arrow Keys:
nnoremap <Right> :echo "No right for you!"<CR>
vnoremap <Right> :<C-u>echo "No right for you!"<CR>
inoremap<Right> <C-o>:echo "No right for you!"<CR>

nnoremap <Left> :echo "No left for you!"<CR>
vnoremap <Left> :<C-u>echo "No left for you!"<CR>
inoremap <Left> <C-o>:echo "No left for you!"<CR>

nnoremap <Up> :echo "No up for you!"<CR>
vnoremap <Up> :<C-u>echo "No up for you!"<CR>
inoremap <Up> <C-o>:echo "No up for you!"<CR>

nnoremap <Down> :echo "No down for you!"<CR>
vnoremap <Down> :<C-u>echo "No down  for you!"<CR>
inoremap <Down> <C-o>:echo "No down for you!"<CR>

" Add New Keys Instead Of Arrow Keys:
inoremap <c-l> <Right>
inoremap <c-h> <Left>
inoremap <c-k> <Up>
inoremap <c-j> <Down>

" Saving As Root:
cabbrev W w !sudo tee %

" Highlight Trailing Spaces:
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" Place Holders:
nnoremap <Space><Space> 0/<++><CR>:noh<Esc>cf>
nnoremap <Tab><Tab> 0?<++><CR>:nohcf>

inoremap <Leader><Space><Space> <Esc>0/<++><CR>:noh<CR>cf>
inoremap <Leader><Tab><Tab> <Esc>0?<++><CR>:noh<CR>cf>

" Grep:
source /home/ahmedselim/.vim/plugin/grep-operator.vim

" Add Placeholder:
nnoremap <Leader>+ i<++>
inoremap <Leader>+ <++>

" Add New Line Under Current Line Without Entering Insert Mode:
nnoremap <Leader>o o<Esc>

" Add New Line Above Current Line Without Entering Insert Mode:
nnoremap <Leader>O O<Esc>

" Easily Go To Normal Mode:
inoremap jk <Esc>

" Easily Quit All:
command Q quitall!

" Fix Backspace Key:
set backspace=indent,eol,start

" Json Format:
noremap <Leader>j :%!python -m json.tool<CR>

" Convert Word To Capital Case:
nnoremap <Leader>u mqbgUl`q
inoremap <Leader>u <Esc><Leader>u

" Edit Vimrc Easily:
nnoremap <Leader>ve :tabnew<CR>:e $MYVIMRC<CR>

" Reload Vimrc:
nnoremap <leader>vs :source $MYVIMRC<cr>

" Abbreviations:
iabbrev iimza -- <CR>Ahmed Selim Üzüm<CR>ahmedselimuzum@gmail.com

set encoding=UTF-8

"" File Browser:
"let g:netrw_liststyle = 3
"let g:netrw_banner = 0
"let g:netrw_browse_split = 4
"let g:netrw_winsize = 15
"let g:netrw_altv = 1
"augroup ProjectDrawer
  "autocmd!
  "autocmd VimEnter * if &ft !=? "tex" | :Vexplore | execute "normal \<C-W>l" | endif
"augroup END
"
" Fixing the cursor:
augroup fix_cursor
    autocmd!
    autocmd VimEnter * silent exec "! echo -ne '\e[1 q'"
    autocmd VimLeave * silent exec "! echo -ne '\e[5 q'"
augroup END

" Latex:

function Is_beamer()
    if search("documentclass{beamer}")
        return 1
    endif
    return 0
endfunction

function Compile_pdf(should_stop)
    write
    normal mi
    if a:should_stop
        execute "silent !pdflatex -interaction=nonstopmode %"
    else
        execute "silent !pdflatex %"
    endif

    let l:is_beamer = Is_beamer()
    if l:is_beamer | let l:pdf_viewer = "mupdf" | else | let l:pdf_viewer = "zathura" | endif
    let l:is_open = system("ps ax | grep \" " . l:pdf_viewer . " " . expand('%:r') . "\" | grep -vc grep")

    if l:is_open
        if l:is_beamer
            execute "silent !pkill -HUP mupdf"
        endif
    else
        execute "silent ! " . l:pdf_viewer . " " . expand("%:r") . ".pdf &"
    endif
    redraw!
    normal `i
endfunction

function Toggle_autocompile(is_auto_compiling_enabled)
    let l:is_enabled = a:is_auto_compiling_enabled
    if l:is_enabled
        autocmd! auto_compile
        let l:is_enabled=0
    else
        augroup compiling_when_save
            autocmd!
            autocmd BufWritePost *.tex :call Compile_pdf(1)
        augroup end
        let l:is_enabled=1
    endif
    return l:is_enabled
endfunction

augroup filetype_tex
    autocmd!
    " Insert New Item:
    autocmd filetype tex nnoremap <buffer> <LocalLeader>ii o\item 
    autocmd filetype tex inoremap <buffer> <LocalLeader>ii <Esc>o\item 


    " Autocomplete Support:
    autocmd filetype tex setlocal dictionary+=/home/ahmedselim/.vim/dictionaries/dictionary_tex

    " Insert Lines:
    autocmd filetype tex nnoremap <buffer> <LocalLeader>il i\draw[<++>] (<++>) -- (<++>) <++>;<Esc>0
    autocmd filetype tex inoremap <buffer> <LocalLeader>il \draw[<++>] (<++>) -- (<++>) <++>;<Esc>0

    " Insert Grid:
    autocmd filetype tex nnoremap <buffer> <LocalLeader>ig i\begin{tikzpicture}<CR>\draw[thin, gray!40] (<++>) grid (<++>);<CR><++><CR>\end{tikzpicture}<Esc>kk
    autocmd filetype tex inoremap <buffer> <LocalLeader>ig \begin{tikzpicture}<CR>\draw[thin, gray!40] (<++>) grid (<++>);<CR><++><CR>\end{tikzpicture}<Esc>kk

    " Compiling:
    autocmd filetype tex let b:is_compiling_enabled=1
    autocmd filetype tex nnoremap <buffer> <localleader>r :call Compile_pdf(0)<cr>
    autocmd filetype tex inoremap <buffer> <localleader>r <esc>:call Compile_pdf(0)<cr>

    " Wrapping:
    autocmd filetype tex set wrap
    autocmd filetype tex nnoremap <buffer> k gk
    autocmd filetype tex nnoremap <buffer> j gj

    " Auto Compile Toggle:
    autocmd filetype tex let b:should_auto_compile = 1
    autocmd filetype tex nnoremap <localleader>tr :let b:should_auto_compile = Toggle_autocompile(b:should_auto_compile) <CR>
augroup END

augroup auto_compile
    autocmd!
    autocmd BufWritePost *.tex :call Compile_pdf(1)
augroup end

call plug#begin('~/.vim/plugged')

Plug 'sirver/ultisnips'
Plug 'junegunn/goyo.vim'
call plug#end()

" Ultisnips:
let g:UltiSnipsSnippetDirectories=[$HOME.'/UltiSnips']
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
