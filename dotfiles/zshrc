# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
export EDITOR="/usr/bin/nvim"

HIST_STAMPS="dd/mm/yyyy"
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Aliases
# Configs
alias i3config="nvim ~/dotfiles-scripts/dotfiles/i3"
alias vimconfig="nvim ~/dotfiles-scripts/dotfiles/nvim"
alias zshconfig="nvim ~/dotfiles-scripts/dotfiles/zshrc"
alias ohmyzsh="nvim ~/.oh-my-zsh"
alias resetZSHSource="source ~/.zshrc"

# Some Commands
alias cl="command clear"
alias cls="command clear; ls"
alias rf="rm -rf"
alias s="sudo "
alias mkd='mkdir -pv'
alias haydaa='s $(fc -ln -1)'
alias q='exit'
alias 'cd..'='cd ..'
alias 'cd ...'='cd ../../'
alias tb="nc termbin.com 9999"
alias jk="fg"
alias pacro="/usr/bin/pacman -Qtdq > /dev/null && sudo /usr/bin/pacman -Rns \$(/usr/bin/pacman -Qtdq | sed -e ':a;N;$!ba;s/\n/ /g')"
alias yoket="pkill -9"
alias weather="curl wttr.in"
alias ls="ls --color=auto"
alias chwp="nitrogen --set-zoom-fill --random /home/$USER/Pictures/Wallpapers/"

# Git
alias g="git"
alias gs="git status"
alias gaa="git add -A"
alias gad="git add ."
alias gpm="git push origin master"
alias gc="git commit -m"
alias gca="git commit -am"

# nvim
alias vi="nvim"
alias v="nvim"
alias vim="nvim"
alias e="nvr -l"
alias :q="exit"
alias :wq="exit"
alias :q!="exit"
alias :Q="exit"

# Functions
dot() {nvim $(du -a ~/dotfiles-scripts | awk '{print $2}' | sed '/\/.git\//d' | fzf)}


export TERM='xterm-256color'

PATH="/home/ahmedselim/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/ahmedselim/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/ahmedselim/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/ahmedselim/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/ahmedselim/perl5"; export PERL_MM_OPT;

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/home/ahmedselim/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
    #eval "$__conda_setup"
#else
if [ -f "/home/ahmedselim/miniconda3/etc/profile.d/conda.sh" ]; then
    . "/home/ahmedselim/miniconda3/etc/profile.d/conda.sh"
else
    export PATH="/home/ahmedselim/miniconda/bin:$PATH"
fi
#fi
#unset __conda_setup
# <<< conda initialize <<<

# Make tab completion case insensetive:
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Fuzzy Config Finder:
#alias fc="du -a ~/dotfiles-scripts ~/.config | awk '{print $2}' | fzf | xargs -r nvim"


# Enable colors and change prompt:
autoload -U colors && colors
# PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.

# ^e to editcommand with nvim
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# reverse search
bindkey '^R' history-incremental-search-backward

# better search with arrow keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

# Use nvim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# vi mode
bindkey -v
export KEYTIMEOUT=1

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

ufetch

# Minimal promt config
MNML_PROMPT=(mnml_ssh mnml_pyenv 'mnml_cwd 2' mnml_status mnml_keymap)
MNML_RPROMPT=(mnml_git mnml_files)

# Plugins
source /home/$USER/.config/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
source /home/$USER/.config/zsh/minimal/minimal.zsh
source /home/$USER/.config/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
